#!/usr/bin/node

const pug = require('pug');
const fs = require('fs');
const Table = require('../lib/Table');
const path = require('path');

let dataDir = process.argv[2];
if (!dataDir.endsWith(path.sep)) dataDir += path.sep;
const domainsFile           = `${process.cwd()}/${dataDir}domains.csv`;
const modulesFile           = `${process.cwd()}/${dataDir}modules.csv`;
const remapFile             = `${process.cwd()}/${dataDir}remap.json`;
const modulesToKeywordsFile = `${process.cwd()}/${dataDir}modulesToKeywords.json`;

const repoName = dataDir.split(path.sep).slice(-2, -1);

const domains           = Table.parse(fs.readFileSync(domainsFile,           { encoding: "utf-8" }));
const modules           = Table.parse(fs.readFileSync(modulesFile,           { encoding: "utf-8" }));
const remap             = JSON.parse (fs.readFileSync(remapFile,             { encoding: "utf-8" }));
const modulesToKeywords = JSON.parse (fs.readFileSync(modulesToKeywordsFile, { encoding: "utf-8" }));

const MODULE_THRESHOLD = 25;
const AUTHOR_THRESHOLD = 0;

function sum(ary) {
  return ary.reduce((a, b) => a + b, 0);
}

for (let row of domains._rows) {
  if (sum(domains.getRow(row)) < AUTHOR_THRESHOLD) {
    domains.removeRow(row);
  }
}
for (let col of domains._cols) {
  if (sum(domains.getCol(col)) < MODULE_THRESHOLD) {
    domains.removeCol(col);
  }
}

const heatmap = new Table();
for (let col of domains._cols) {
  let colSum = sum(domains.getCol(col));
  for (let row of domains._rows) {
    let fraction = domains.get(row, col) / colSum;
    let heat = Math.floor(fraction * 9);
    let percentage = (fraction * 100).toFixed(2) + '%';
    heatmap.set(row, col, {heat, percentage});
  }
}

const reportData = {
  title: repoName,
  short_title: repoName,
  domains,
  remap,
  modules,
  heatmap,
  modulesToKeywords,
  sum: sum
}

console.log(pug.renderFile(__dirname + '/report.pug', reportData));
