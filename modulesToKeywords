#!/usr/bin/node

const parse = require('csv-parse');
const transform = require('stream-transform');
const stringify = require('csv-stringify');
const request = require('sync-request');
const fs = require('fs');
const _ = require('lodash');

const file = process.argv[2];
const raw = fs.readFileSync(file, { encoding: "utf-8" });
const keywordStats = JSON.parse(fs.readFileSync('out/keywords_counted.json'));
let readFirstRow = false;
let firstRowCopy = null;

const rrows = raw.split(";\n");
const [ffirst, ...rrest] = rrows;
firstRowCopy = `${ffirst}`;

parse(raw, {}, (err, parsed) => {
  if (err) throw err;


  transform(parsed, row => {
    if (readFirstRow) {
      // Do nothing
    } else {

      for (let i = 1; i < row.length; i++) {
        const moduleName = row[i];
        const baseModuleName = moduleName.split("/")[0];
        const url = `http://localhost:5984/npm-skim/${baseModuleName}`;
        let mod = null;
        try {
          mod = JSON.parse(request('GET', url).getBody());
        } catch (err) {
          continue;
        }
        const keywords = mod['keywords'] || [];
        const keywordsWithCounts = _.pick(keywordStats, keywords);
        let max = Number.NEGATIVE_INFINITY;
        // console.log(keywordsWithCounts);
        let keyword = undefined;
        for (let prop in keywordsWithCounts) {
          const val = keywordsWithCounts[prop];
          if (val > max) {
            // console.log(`testing ${prop} => ${val}`)
            max = val;
            keyword = prop;
          }
        }
        // console.log(`max is ${keyword}`)
        row[i] = keyword ? keyword.toUpperCase() : moduleName;
      }
      readFirstRow = true;
    }
    return row;
  }, (err, transformed) => {
    if (err) throw err;
    stringify(transformed, (err, stringified) => {
      if (err) throw err;

      const rows = stringified.split(";\n");
      const [first, ...rest] = rows;

      let report = "";
      report = report.concat(first + ";\n");
      report = report.concat(firstRowCopy + ";\n");
      report = report.concat(rest.join(";\n"));
      // report = report.concat(";\n")
      fs.writeFileSync(process.argv[3], report);
      console.log(report);
    });
  });
});
